#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

topic "Installing Chrome"

PACKAGE="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
PACKAGE_NAME=$(basename $PACKAGE .deb)
PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

topic "Fetching $PACKAGE"
curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent

topic "Installing $PACKAGE"
dpkg -x $PACKAGE_FILE $BUILD_DIR/.apt/
cd $BUILD_DIR/.apt/usr/bin
ln -s ../../opt/google/chrome/google-chrome google-chrome


topic "Downloading and installing ChromeDriver"

mkdir -p $BUILD_DIR/vendor/chromedriver

chromedriver_url="http://chromedriver.storage.googleapis.com/2.16/chromedriver_linux64.zip"
curl $chromedriver_url -s -o $BUILD_DIR/vendor/chromedriver/chromedriver.zip
unzip $BUILD_DIR/vendor/chromedriver/chromedriver.zip -d $BUILD_DIR/vendor/chromedriver
rm $BUILD_DIR/vendor/chromedriver/chromedriver.zip
ls -lah $BUILD_DIR/vendor/chromedriver

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/chromedriver.sh
export PATH="\$HOME/vendor/chromedriver:\$PATH"
EOF

# Start Xvfb, Chrome in the background
export DISPLAY=:10


# symlink libs to where Xvfb searches
ln -s /lib/x86_64-linux-gnu/libudev.so.1 $1/.apt/usr/lib/libudev.so.0
ln -s /app/.apt/usr/lib/x86_64-linux-gnu/libXfont.so.1 $1/.apt/usr/lib/libXfont.so.1
ln -s /app/.apt/usr/lib/x86_64-linux-gnu/libGL.so.1 $1/.apt/usr/lib/libGL.so.1

# patch Xvfb to use /app/.. paths instead of hardcoded wrong values
sed -i.bak s/usr\\/bin/app\\/ubi/g $1/.apt/usr/bin/Xvfb
sed -i.bak s/usr\\/share\\/fonts/app\\/usr-s-fonts/g $1/.apt/usr/bin/Xvfb
# create symlinks for Xvfb to use /app/.apt/usr/...
ln -s /app/.apt/usr/bin $1/ubi
ln -s /app/.apt/usr/share/fonts $1/usr-s-fonts

# run mkfontdir with binaries from inside dyno
export PATH="$PATH:$1/.apt/usr/bin"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$1/.apt/usr/lib:$1/.apt/usr/lib/x86_64-linux-gnu"
find $1/.apt/usr/share/fonts/X11 -type d | xargs $1/.apt/usr/bin/mkfontdir



echo "Starting Xvfb ..."
Xvfb :10 -screen 0 1366x768x24 -ac &

echo "Starting Google Chrome ..."
google-chrome &